package pl.edu.pjatk.tau.labfour.service;

import org.springframework.stereotype.Service;
import pl.edu.pjatk.tau.labfour.domain.Invoice;

import java.sql.*;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Optional;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Service
public class InvoiceDaoImpl implements InvoiceDaoManager<Invoice> {

    private Connection connection;
    private static List<Invoice> invoices = new ArrayList<>();

    private static Integer idCounter = 0;
    public static String number;
    public static String listOfNumber;

    private PreparedStatement addInvoiceStmt;
    private PreparedStatement getAllInvoicesStmt;
    private PreparedStatement deleteInvoiceStmt;
    private PreparedStatement getInvoiceStmt;
    private PreparedStatement updateInvoiceStmt;
    private PreparedStatement deleteAllInvoicesStmt;

    private final static LocalDate LOCAL_DATE = LocalDate.of(2016, 6, 16);

    public InvoiceDaoImpl(Connection connection) throws SQLException {
        this.connection = connection;
        if (!isDatabaseReady()) {
            createTables();
        }
        setConnection(connection);
    }

    public InvoiceDaoImpl() throws SQLException {
        this.connection = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/workdb");
        if (!isDatabaseReady()) {
            createTables();
        }
        this.setConnection(this.connection);
    }

        public void createTables() throws SQLException {
            connection.createStatement()
                    .executeUpdate("CREATE TABLE "
                            +"Invoice(id bigint GENERATED BY DEFAULT AS IDENTITY, "
                            +"idKht bigint NOT NULL, "
                            +"invoiceNumber varchar(20) NOT NULL, "
                            +"netto numeric(12,2), "
                            +"brutto numeric(12,2), "
                            +"vat numeric(12,2), "
                            +"vatMark integer, "
                            +"description varchar(100))");
        }

        public boolean isDatabaseReady() {
            try {
                ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
                boolean tableExists = false;
                while (rs.next()) {
                    if ("Invoice".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                        tableExists = true;
                        break;
                    }
                }
                return tableExists;
            } catch (SQLException e) {
                return false;
            }
        }

        public Connection getConnection() {
            return connection;
        }

        public void setConnection(Connection connection) throws SQLException {
            this.connection = connection;
            addInvoiceStmt = connection.prepareStatement(
                    "INSERT INTO Invoice (idKht, invoiceNumber, netto, brutto, vat, vatMark, description) VALUES (?, ?, ?, ?, ?, ?, ?)",
                    Statement.RETURN_GENERATED_KEYS);

            deleteInvoiceStmt = connection.prepareStatement("DELETE FROM Invoice where id = ?");
            deleteAllInvoicesStmt = connection.prepareStatement("DELETE FROM Invoice");
            getAllInvoicesStmt = connection.prepareStatement("SELECT id, idKht, invoiceNumber, netto, brutto, vat, vatMark, description FROM Invoice ORDER BY id");
            getInvoiceStmt = connection.prepareStatement("SELECT id, idKht, invoiceNumber, netto, brutto, vat, vatMark, description FROM Invoice WHERE id = ?");
            updateInvoiceStmt = connection.prepareStatement("UPDATE Invoice SET idKht=?, invoiceNumber=?, netto=?, brutto=?, vat=?, vatMark=?, description=? WHERE id = ?");

        }

    @Override
    public Integer create(Invoice invoice){
        int count = 0;
        try {
            addInvoiceStmt.setInt(1,invoice.getIdKht());
            addInvoiceStmt.setString(2,invoice.getInvoiceNumber());
            addInvoiceStmt.setDouble(3,invoice.getNetto());
            addInvoiceStmt.setDouble(4,invoice.getBrutto());
            addInvoiceStmt.setDouble(5,invoice.getVat());
            addInvoiceStmt.setInt(6,invoice.getVatMark());
            addInvoiceStmt.setString(7,invoice.getDescription());
            count = addInvoiceStmt.executeUpdate();
            ResultSet generatedKeys = addInvoiceStmt.getGeneratedKeys();
            if (generatedKeys.next()) {
                invoice.setId(generatedKeys.getInt(1));
            }
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }

        return count;
    };

    @Override
    public Invoice get(int id) throws SQLException {
        try {
            getInvoiceStmt.setLong(1, id);
            ResultSet rs = getInvoiceStmt.executeQuery();

            if (rs.next()) {
                Invoice i = new Invoice();
                i.setId(rs.getInt("id"));
                i.setIdKht(rs.getInt("idKht"));
                i.setInvoiceNumber(rs.getString("invoiceNumber"));
                i.setNetto(rs.getDouble("netto"));
                i.setBrutto(rs.getDouble("brutto"));
                i.setVat(rs.getDouble("vat"));
                i.setVatMark(rs.getInt("vatMark"));
                i.setDescription(rs.getString("description"));
                return i;
            }

        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        throw new SQLException("Something go wrong! In the database not found record with id:" + id);
    }

    @Override
    public Integer update(Invoice invoice) throws SQLException{
        int count = 0;
        try {
            updateInvoiceStmt.setInt(1, invoice.getIdKht());
            updateInvoiceStmt.setString(2, invoice.getInvoiceNumber());
            updateInvoiceStmt.setDouble(3, invoice.getNetto());
            updateInvoiceStmt.setDouble(3, invoice.getBrutto());
            updateInvoiceStmt.setDouble(3, invoice.getVat());
            updateInvoiceStmt.setInt(3, invoice.getVatMark());
            updateInvoiceStmt.setString(3, invoice.getDescription());
            count = updateInvoiceStmt.executeUpdate();
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        if (count <= 0)
            throw new SQLException("Something go wrong! In the database not found record for update!");
        return count;
    };

    @Override
    public List<Invoice> getAll(){
        List<Invoice> invoiceList = invoices;
        invoiceList.forEach(Invoice::setLastReadDate);
        return invoices;


    };

    @Override
    public void delete(Invoice invoice){
        boolean remove = false;
        remove = invoices.remove(invoice);

        if(remove == false){
            throw new IndexOutOfBoundsException("Something go wrong! In the database not found record with id:" + invoice.getId());
        }

    };

    private Integer generateId(){
        return idCounter++;
    }

    private Optional<Invoice> findWithID(Integer id){
        return invoices.stream().filter(i -> i.getId()==(id)).findFirst();
    }

    public void deleteAll(){
        invoices.clear();
        idCounter = 0;
    }

    public String findByRegularExpresion(){
        String numberFound="No invoice with this number found";
        Pattern compliedPattern = Pattern.compile(number);

        for (Invoice invoice: invoices) {
            Matcher matcher = compliedPattern.matcher(invoice.getInvoiceNumber());
            if(matcher.matches()==true){
                numberFound = invoice.getInvoiceNumber();
            }
        }
        return numberFound;
    }

    public Integer findIdOfInvoiceNumber(String searchedNumber){
        int idFound = -1;
        Pattern compliedPattern = Pattern.compile(searchedNumber);

        for (Invoice invoice: invoices) {
            Matcher matcher = compliedPattern.matcher(invoice.getInvoiceNumber());
            if(matcher.matches()==true){
                idFound = invoice.getId();
            }
        }
        return idFound;
    }
/*
    public String deleteListOfInvoices(){
        String deletedInvoicesNumber = "";
        String numberFromInvoice ;
        int idOfInvoice;

        List<Invoice> listToDelete = new ArrayList<>();

        String[] parts = listOfNumber.split(",");

        for(int i=0;i<parts.length;i++){
            numberFromInvoice = parts[i];
            idOfInvoice = findIdOfInvoiceNumber(numberFromInvoice);
            if(idOfInvoice != -1){
                deletedInvoicesNumber += numberFromInvoice+",";
                listToDelete.add(get(idOfInvoice));
            }
        }

        for(int i=0;i<listToDelete.size();i++){
            delete(listToDelete.get(i));
        }

        if(deletedInvoicesNumber == ""){
            deletedInvoicesNumber = "No invoice number was found";
        }

        return deletedInvoicesNumber;
    }
 */
}
