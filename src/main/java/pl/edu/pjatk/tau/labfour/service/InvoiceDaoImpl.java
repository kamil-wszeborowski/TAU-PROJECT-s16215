package pl.edu.pjatk.tau.labfour.service;

import org.springframework.stereotype.Service;
import pl.edu.pjatk.tau.labfour.domain.Invoice;

import java.sql.*;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

@Service
public class InvoiceDaoImpl implements InvoiceDaoManager<Invoice> {

    private Connection connection;
    private static List<Invoice> invoices = new ArrayList<>();

    private PreparedStatement addInvoiceStmt;
    private PreparedStatement getAllInvoicesStmt;
    private PreparedStatement deleteInvoiceStmt;
    private PreparedStatement getInvoiceStmt;
    private PreparedStatement updateInvoiceStmt;
    private PreparedStatement deleteAllInvoicesStmt;

    private final static LocalDate LOCAL_DATE = LocalDate.of(2016, 6, 16);

    public InvoiceDaoImpl(Connection connection) throws SQLException {
        this.connection = connection;
        if (!isDatabaseReady()) {
            createTables();
        }
        setConnection(connection);
    }

    public InvoiceDaoImpl() throws SQLException {
        this.connection = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/workdb");
        if (!isDatabaseReady()) {
            createTables();
        }
        this.setConnection(this.connection);
    }

        public void createTables() throws SQLException {
            connection.createStatement()
                    .executeUpdate("CREATE TABLE "
                            +"Invoice(id bigint GENERATED BY DEFAULT AS IDENTITY, "
                            +"idKht bigint NOT NULL, "
                            +"invoiceNumber varchar(20) NOT NULL, "
                            +"netto numeric(12,2), "
                            +"brutto numeric(12,2), "
                            +"vat numeric(12,2), "
                            +"vatMark integer, "
                            +"description varchar(100))");
        }

        public boolean isDatabaseReady() {
            try {
                ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
                boolean tableExists = false;
                while (rs.next()) {
                    if ("Invoice".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                        tableExists = true;
                        break;
                    }
                }
                return tableExists;
            } catch (SQLException e) {
                return false;
            }
        }

        public Connection getConnection() {
            return connection;
        }

        public void setConnection(Connection connection) throws SQLException {
            this.connection = connection;
            addInvoiceStmt = connection.prepareStatement(
                    "INSERT INTO Invoice (idKht, invoiceNumber, netto, brutto, vat, vatMark, description) VALUES (?, ?, ?, ?, ?, ?, ?)",
                    Statement.RETURN_GENERATED_KEYS);

            deleteInvoiceStmt = connection.prepareStatement("DELETE FROM Invoice where id = ?");
            deleteAllInvoicesStmt = connection.prepareStatement("DELETE FROM Invoice");
            getAllInvoicesStmt = connection.prepareStatement("SELECT id, idKht, invoiceNumber, netto, brutto, vat, vatMark, description FROM Invoice ORDER BY id");
            getInvoiceStmt = connection.prepareStatement("SELECT id, idKht, invoiceNumber, netto, brutto, vat, vatMark, description FROM Invoice WHERE id = ?");
            updateInvoiceStmt = connection.prepareStatement("UPDATE Invoice SET idKht=?, invoiceNumber=?, netto=?, brutto=?, vat=?, vatMark=?, description=? WHERE id = ?");

        }

    @Override
    public Integer create(Invoice invoice){
        int count = 0;
        try {
            addInvoiceStmt.setInt(1,invoice.getIdKht());
            addInvoiceStmt.setString(2,invoice.getInvoiceNumber());
            addInvoiceStmt.setDouble(3,invoice.getNetto());
            addInvoiceStmt.setDouble(4,invoice.getBrutto());
            addInvoiceStmt.setDouble(5,invoice.getVat());
            addInvoiceStmt.setInt(6,invoice.getVatMark());
            addInvoiceStmt.setString(7,invoice.getDescription());
            count = addInvoiceStmt.executeUpdate();
            ResultSet generatedKeys = addInvoiceStmt.getGeneratedKeys();
            if (generatedKeys.next()) {
                invoice.setId(generatedKeys.getInt(1));
            }
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }

        return count;
    };

    @Override
    public Invoice get(int id) throws SQLException {
        try {
            getInvoiceStmt.setLong(1, id);
            ResultSet rs = getInvoiceStmt.executeQuery();

            if (rs.next()) {
                Invoice i = new Invoice();
                i.setId(rs.getInt("id"));
                i.setIdKht(rs.getInt("idKht"));
                i.setInvoiceNumber(rs.getString("invoiceNumber"));
                i.setNetto(rs.getDouble("netto"));
                i.setBrutto(rs.getDouble("brutto"));
                i.setVat(rs.getDouble("vat"));
                i.setVatMark(rs.getInt("vatMark"));
                i.setDescription(rs.getString("description"));
                return i;
            }

        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        throw new SQLException("Something go wrong! In the database not found record with id:" + id);
    }

    @Override
    public Integer update(Integer id,Invoice invoice) throws SQLException{
        int count = 0;
        try {
            updateInvoiceStmt.setInt(1, invoice.getIdKht());
            updateInvoiceStmt.setString(2, invoice.getInvoiceNumber());
            updateInvoiceStmt.setDouble(3, invoice.getNetto());
            updateInvoiceStmt.setDouble(4, invoice.getBrutto());
            updateInvoiceStmt.setDouble(5, invoice.getVat());
            updateInvoiceStmt.setInt(6, invoice.getVatMark());
            updateInvoiceStmt.setString(7, invoice.getDescription());
            updateInvoiceStmt.setInt( 8,id);
            count = updateInvoiceStmt.executeUpdate();
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        if (count <= 0)
            throw new SQLException("Something go wrong! In the database not found record for update!");
        return count;
    };

    @Override
    public List<Invoice> getAll(){
        List<Invoice> invoices = new LinkedList<>();
        try {
            ResultSet rs = getAllInvoicesStmt.executeQuery();
            while (rs.next()) {
                Invoice i = new Invoice();
                i.setId(rs.getInt("id"));
                i.setIdKht(rs.getInt("idKht"));
                i.setInvoiceNumber(rs.getString("invoiceNumber"));
                i.setNetto(rs.getDouble("netto"));
                i.setBrutto(rs.getDouble("brutto"));
                i.setVat(rs.getDouble("vat"));
                i.setVatMark(rs.getInt("vatMark"));
                i.setDescription(rs.getString("description"));

                invoices.add(i);
            }

        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return invoices;

    };

    @Override
    public Integer delete(Invoice invoice){
        try {
            deleteInvoiceStmt.setLong(1, invoice.getId());
            return deleteInvoiceStmt.executeUpdate();
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }

    };

    public void deleteAll(){
        invoices.clear();
    }


}
